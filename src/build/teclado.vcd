$date
	Thu Oct 31 07:52:39 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module tb_module_top $end
$var wire 4 ! col_out [3:0] $end
$var wire 7 " catodo_po [6:0] $end
$var wire 4 # anodo_po [3:0] $end
$var reg 1 $ clk $end
$var reg 4 % row_in [3:0] $end
$var reg 1 & rst $end
$var reg 13 ' stored_A [12:0] $end
$scope module uut $end
$var wire 1 $ clk $end
$var wire 4 ( col_shift_reg [3:0] $end
$var wire 4 ) row_in [3:0] $end
$var wire 1 & rst $end
$var wire 12 * stored_B [11:0] $end
$var wire 12 + stored_A [11:0] $end
$var wire 1 , state_enableB $end
$var wire 1 - state_enableA $end
$var wire 1 . slow_clk $end
$var wire 1 / ready_operandos $end
$var wire 4 0 key_value [3:0] $end
$var wire 1 1 key_pressed $end
$var wire 1 2 is_sign_key $end
$var wire 2 3 column_index [1:0] $end
$var wire 4 4 col_out [3:0] $end
$var wire 4 5 clean_rows [3:0] $end
$var wire 7 6 catodo_po [6:0] $end
$var wire 16 7 bcd [15:0] $end
$var wire 4 8 anodo_po [3:0] $end
$scope begin debouncer_loop[0] $end
$var parameter 2 9 i $end
$scope module debounce_inst $end
$var wire 1 $ clk $end
$var wire 1 : noisy_signal $end
$var wire 1 & rst $end
$var parameter 32 ; DEBOUNCE_TIME $end
$var reg 1 < clean_signal $end
$var reg 32 = counter [31:0] $end
$var reg 1 > noisy_signal_reg $end
$upscope $end
$upscope $end
$scope begin debouncer_loop[1] $end
$var parameter 2 ? i $end
$scope module debounce_inst $end
$var wire 1 $ clk $end
$var wire 1 @ noisy_signal $end
$var wire 1 & rst $end
$var parameter 32 A DEBOUNCE_TIME $end
$var reg 1 B clean_signal $end
$var reg 32 C counter [31:0] $end
$var reg 1 D noisy_signal_reg $end
$upscope $end
$upscope $end
$scope begin debouncer_loop[2] $end
$var parameter 3 E i $end
$scope module debounce_inst $end
$var wire 1 $ clk $end
$var wire 1 F noisy_signal $end
$var wire 1 & rst $end
$var parameter 32 G DEBOUNCE_TIME $end
$var reg 1 H clean_signal $end
$var reg 32 I counter [31:0] $end
$var reg 1 J noisy_signal_reg $end
$upscope $end
$upscope $end
$scope begin debouncer_loop[3] $end
$var parameter 3 K i $end
$scope module debounce_inst $end
$var wire 1 $ clk $end
$var wire 1 L noisy_signal $end
$var wire 1 & rst $end
$var parameter 32 M DEBOUNCE_TIME $end
$var reg 1 N clean_signal $end
$var reg 32 O counter [31:0] $end
$var reg 1 P noisy_signal_reg $end
$upscope $end
$upscope $end
$scope module converter_inst $end
$var wire 12 Q binario [11:0] $end
$var reg 16 R bcd [15:0] $end
$var integer 32 S i [31:0] $end
$upscope $end
$scope module display_inst $end
$var wire 16 T bcd_i [15:0] $end
$var wire 1 $ clk_i $end
$var wire 1 & rst_i $end
$var parameter 32 U DISPLAY_REFRESH $end
$var parameter 32 V WIDTH_DISPLAY_COUNTER $end
$var reg 4 W anodo_o [3:0] $end
$var reg 7 X catodo_o [6:0] $end
$var reg 2 Y contador_digitos [1:0] $end
$var reg 15 Z cuenta_salida [14:0] $end
$var reg 4 [ digito_o [3:0] $end
$var reg 1 \ en_conmutador $end
$upscope $end
$scope module divisor_inst $end
$var wire 1 $ clk $end
$var wire 1 & rst $end
$var reg 25 ] clk_divider_counter [24:0] $end
$var reg 1 . slow_clk $end
$upscope $end
$scope module input_inst $end
$var wire 1 $ clk $end
$var wire 1 & rst $end
$var wire 1 , state_enableB $end
$var wire 1 - state_enableA $end
$var wire 4 ^ key_value [3:0] $end
$var wire 1 1 key_pressed $end
$var wire 1 2 is_sign_key $end
$var reg 1 _ key_pressed_prev $end
$var reg 1 ` load_value $end
$var reg 12 a stored_A [11:0] $end
$var reg 12 b stored_B [11:0] $end
$var reg 12 c temp_value [11:0] $end
$upscope $end
$scope module ocontrol_inst $end
$var wire 1 $ clk $end
$var wire 1 d key_pressed $end
$var wire 1 & rst $end
$var reg 2 e count [1:0] $end
$var reg 2 f current_state [1:0] $end
$var reg 1 g key_pressed_prev $end
$var reg 2 h next_state [1:0] $end
$var reg 1 / ready $end
$var reg 1 - state_enableA $end
$var reg 1 , state_enableB $end
$upscope $end
$scope module registro_inst $end
$var wire 1 & rst $end
$var wire 1 . slow_clk $end
$var wire 1 1 key_pressed $end
$var reg 4 i col_shift_reg [3:0] $end
$var reg 2 j column_index [1:0] $end
$upscope $end
$scope module scanner_inst $end
$var wire 4 k col_shift_reg [3:0] $end
$var wire 4 l row_in [3:0] $end
$var wire 1 & rst $end
$var wire 1 . slow_clk $end
$var reg 1 2 is_sign_key $end
$var reg 1 1 key_pressed $end
$var reg 4 m key_value [3:0] $end
$upscope $end
$upscope $end
$scope task simulate_key_presses $end
$var integer 32 n i [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b1111 V
b110100101111000 U
b110100101111000 M
b11 K
b110100101111000 G
b10 E
b110100101111000 A
b1 ?
b110100101111000 ;
b0 9
$end
#0
$dumpvars
bx n
b0 m
b0 l
bx k
bx j
bx i
bx h
0g
b0 f
b0 e
zd
b0 c
b0 b
b0 a
0`
0_
b0 ^
bx ]
x\
bx [
bx Z
bx Y
bx X
bx W
b0 T
b1100 S
b0 R
b0 Q
0P
b0 O
0N
0L
0J
b0 I
0H
0F
0D
b0 C
0B
0@
0>
b0 =
0<
0:
bx 8
b0 7
bx 6
b0 5
bx 4
bx 3
02
01
b0 0
0/
0.
x-
x,
b0 +
b0 *
b0 )
bx (
bx '
0&
b0 %
0$
bx #
bx "
bx !
$end
#5
b1000000 "
b1000000 6
b1000000 X
b1110 #
b1110 8
b1110 W
b0 [
b0 ]
0\
b110100101110111 Z
b0 Y
1$
#10
0$
1&
#15
b1 =
b1 C
b1 I
b1 O
zg
bx f
b110100101110110 Z
b1 ]
1$
#20
1L
0$
b1000 %
b1000 )
#25
b0 h
b0 O
1P
b10 I
b10 C
b10 =
b10 ]
b110100101110101 Z
1$
#30
0L
0$
b0 %
b0 )
#35
b11 =
b11 C
b11 I
0P
b0 f
b110100101110100 Z
b11 ]
1$
#40
1@
0$
b10 %
b10 )
#45
b1 O
b100 I
b0 C
1D
b100 =
b100 ]
b110100101110011 Z
1$
#50
0$
